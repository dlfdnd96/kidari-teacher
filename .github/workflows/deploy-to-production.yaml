name: Deploy to Production VM

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  deploy-production:
    runs-on: [self-hosted, production]
    environment: production

    env:
      NODE_ENV: production
      PORT: 3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send deployment start notification
        run: |
          CURRENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          ACTOR="${{ github.actor }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TRIGGER_TYPE="🔧 수동 배포"
            TRIGGER_DESCRIPTION="**master** 브랜치를 수동으로 배포합니다."
          else
            TRIGGER_TYPE="🚀 자동 배포"
            TRIGGER_DESCRIPTION="**master** 브랜치에 푸시되어 자동 배포합니다."
          fi

          cat > discord_payload.json << EOF
          {
            "embeds": [{
              "title": "🔥 프로덕션 배포 시작",
              "description": "**master** 브랜치 프로덕션 배포를 시작합니다.",
              "color": 16776960,
              "fields": [
                {
                  "name": "브랜치",
                  "value": "\`${BRANCH_NAME}\`",
                  "inline": true
                },
                {
                  "name": "커밋",
                  "value": "\`${COMMIT_SHA:0:8}\`",
                  "inline": true
                },
                {
                  "name": "환경",
                  "value": "**🚨 PRODUCTION 🚨**",
                  "inline": true
                },
                {
                  "name": "배포자",
                  "value": "${ACTOR}",
                  "inline": true
                }
              ],
              "timestamp": "${CURRENT_TIME}"
            }]
          }
          EOF

          if curl -f -H "Content-Type: application/json" \
                  -H "User-Agent: GitHub-Actions" \
                  -X POST \
                  -d @discord_payload.json \
                  "${{ secrets.DISCORD_WEBHOOK_URL }}"; then
            echo "✅ Discord notification sent successfully"
          else
            echo "❌ Failed to send Discord notification"
          fi

      - name: Create production environment file
        run: |
          echo "Creating .env for production environment..."

          cat > .env << 'EOF'
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_DATABASE_URL=${{ secrets.POSTGRES_DATABASE_URL }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NODE_ENV=production
          NEXT_PUBLIC_ENVIRONMENT=production
          NEXT_PUBLIC_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          NEXT_PUBLIC_COMMIT_SHA=${{ github.sha }}
          NEXT_PUBLIC_BRANCH=${{ github.ref_name }}
          EOF

          echo "✅ Production environment file created"

          echo "📋 Environment variables loaded:"
          grep -E "^(NODE_ENV|NEXT_PUBLIC_ENVIRONMENT|POSTGRES_DB|POSTGRES_PORT)=" .env || true

      - name: Validate environment variables
        run: |
          echo "🔍 Validating required environment variables..."

          required_vars=(
            "POSTGRES_USER"
            "POSTGRES_PASSWORD"
            "POSTGRES_DB"
            "POSTGRES_HOST"
            "POSTGRES_PORT"
            "POSTGRES_DATABASE_URL"
            "NAVER_CLIENT_ID"
            "NAVER_CLIENT_SECRET"
            "KAKAO_CLIENT_ID"
            "KAKAO_CLIENT_SECRET"
            "GOOGLE_CLIENT_ID"
            "GOOGLE_CLIENT_SECRET"
            "NEXTAUTH_SECRET"
          )

          missing_vars=()
          for var in "${required_vars[@]}"; do
            if grep -q "^${var}=" .env && [ -n "$(grep "^${var}=" .env | cut -d'=' -f2)" ]; then
              echo "✅ $var is set"
            else
              echo "❌ $var is missing or empty!"
              missing_vars+=("$var")
            fi
          done

          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "💥 Missing required environment variables: ${missing_vars[*]}"
            exit 1
          fi

          echo "✅ All required environment variables are validated!"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
        timeout-minutes: 15

      - name: Setup PM2
        run: |
          echo "🔧 Setting up PM2..."

          if command -v pm2 &> /dev/null; then
            echo "✅ PM2 is already installed: $(pm2 --version)"
          else
            echo "📦 Installing PM2 globally..."
            npm install -g pm2

            if command -v pm2 &> /dev/null; then
              echo "✅ PM2 installed successfully: $(pm2 --version)"
            else
              echo "❌ PM2 installation failed"
              exit 1
            fi
          fi

          pm2 ping &> /dev/null || pm2 kill && pm2 resurrect

      - name: Build Next.js app
        run: |
          echo "🏗️ Building with production configuration..."
          npm run build

      - name: Create backup
        run: |
          BACKUP_DIR="$HOME/backups/nextjs-$(date +%Y%m%d_%H%M%S)"
          mkdir -p $BACKUP_DIR
          if pm2 list | grep -q nextjs-app; then
            cp -r .next $BACKUP_DIR/ 2>/dev/null || true
            cp package.json $BACKUP_DIR/ 2>/dev/null || true
            echo "📦 Backup created at $BACKUP_DIR"
          else
            echo "ℹ️ No existing nextjs-app process found to backup"
          fi

      - name: Stop existing production server
        run: |
          echo "🛑 Stopping existing production server..."
          pm2 stop nextjs-app || echo "ℹ️ nextjs-app was not running"
          pm2 delete nextjs-app || echo "ℹ️ nextjs-app was not in PM2 list"

      - name: Deploy to production
        run: |
          echo "📦 Installing production dependencies..."
          npm ci

      - name: Prepare for PM2 startup
        run: |
          echo "📁 Creating logs directory..."
          mkdir -p logs

          echo "📋 Current directory: $(pwd)"
          echo "📦 Package.json scripts:"
          grep -A 5 '"scripts"' package.json || true

      - name: Start production server
        run: |
          echo "🚀 Starting production server with PM2..."

          if pm2 start ecosystem.config.js --env production; then
            echo "✅ PM2 started successfully"
            pm2 save
            echo "✅ PM2 configuration saved"

            echo "📊 PM2 Status:"
            pm2 list
          else
            echo "❌ PM2 start failed, trying alternative method..."

            echo "🔄 Trying direct npm start..."
            pm2 start npm --name "nextjs-app" -- start
            pm2 save
          fi

      - name: Health check
        run: |
          echo "🏥 Performing health check..."
          sleep 15

          for i in {1..10}; do
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check attempt $i failed, retrying in 5 seconds..."
              sleep 5
              if [ $i -eq 10 ]; then
                echo "❌ Health check failed after 10 attempts"
                pm2 logs nextjs-app --lines 20
                exit 1
              fi
            fi
          done
        timeout-minutes: 15

      - name: Production deployment verification
        run: |
          echo "🔍 Production deployment verification..."

          echo "📊 PM2 Process Status:"
          pm2 list

          echo "⏱️ Service Response Time:"
          time curl -s http://localhost:3000 > /dev/null

          echo "💾 Memory Usage:"
          free -h

          echo "💿 Disk Usage:"
          df -h

          echo "🔧 Environment:"
          echo "NODE_ENV: $(grep NODE_ENV .env | cut -d'=' -f2)"
          echo "Build Time: $(grep NEXT_PUBLIC_BUILD_TIME .env | cut -d'=' -f2)"
          echo "Commit SHA: $(grep NEXT_PUBLIC_COMMIT_SHA .env | cut -d'=' -f2)"

      - name: Cleanup old backups
        run: |
          echo "🧹 Cleaning up old backups..."
          if ls $HOME/backups/nextjs-* 1> /dev/null 2>&1; then
            ls -t $HOME/backups/nextjs-* | tail -n +6 | xargs rm -rf 2>/dev/null || true
            echo "✅ Old backups cleaned up"
          else
            echo "ℹ️ No old backups to clean up"
          fi

      - name: Send production deployment success notification
        if: success()
        run: |
          CURRENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          DEPLOY_TIME=$(date +"%Y-%m-%d %H:%M:%S KST")
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          ACTOR="${{ github.actor }}"

          COMMIT_MSG="${{ github.event.head_commit.message || 'Manual deployment' }}"
          COMMIT_MSG=$(echo "$COMMIT_MSG" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | head -c 100)

          cat > success_payload.json << EOF
          {
            "content": "@everyone 프로덕션 배포 완료!",
            "embeds": [{
              "title": "🎉 프로덕션 배포 성공!",
              "description": "**Production** 환경 배포가 성공적으로 완료되었습니다!",
              "color": 5763719,
              "fields": [
                {
                  "name": "🌐 사이트 URL",
                  "value": "[https://yoursite.com](https://yoursite.com)",
                  "inline": false
                },
                {
                  "name": "📋 배포 정보",
                  "value": "**브랜치:** \`${BRANCH_NAME}\`\n**커밋:** \`${COMMIT_SHA:0:8}\`\n**배포자:** ${ACTOR}",
                  "inline": true
                },
                {
                  "name": "💬 커밋 메시지",
                  "value": "${COMMIT_MSG}",
                  "inline": false
                },
                {
                  "name": "🕒 배포 시간",
                  "value": "${DEPLOY_TIME}",
                  "inline": true
                },
                {
                  "name": "⚡ 서버 상태",
                  "value": "Production VM - 정상 구동",
                  "inline": true
                }
              ],
              "timestamp": "${CURRENT_TIME}"
            }]
          }
          EOF

          if curl -f -H "Content-Type: application/json" \
                  -H "User-Agent: GitHub-Actions" \
                  -X POST \
                  -d @success_payload.json \
                  "${{ secrets.DISCORD_WEBHOOK_URL }}"; then
            echo "✅ Success notification sent"
          else
            echo "❌ Failed to send success notification"
          fi

      - name: Send production deployment failure notification
        if: failure()
        run: |
          CURRENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          FAIL_TIME=$(date +"%Y-%m-%d %H:%M:%S KST")
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          ACTOR="${{ github.actor }}"
          RUN_ID="${{ github.run_id }}"
          REPO="${{ github.repository }}"

          cat > failure_payload.json << EOF
          {
            "content": "@here 🚨 프로덕션 배포 실패!",
            "embeds": [{
              "title": "💥 프로덕션 배포 실패",
              "description": "**Production** 환경 배포가 실패했습니다. 즉시 확인이 필요합니다!",
              "color": 15158332,
              "fields": [
                {
                  "name": "브랜치",
                  "value": "\`${BRANCH_NAME}\`",
                  "inline": true
                },
                {
                  "name": "커밋",
                  "value": "\`${COMMIT_SHA:0:8}\`",
                  "inline": true
                },
                {
                  "name": "배포자",
                  "value": "${ACTOR}",
                  "inline": true
                },
                {
                  "name": "실패 시간",
                  "value": "${FAIL_TIME}",
                  "inline": true
                },
                {
                  "name": "로그 확인",
                  "value": "[GitHub Actions 로그 보기](https://github.com/${REPO}/actions/runs/${RUN_ID})",
                  "inline": false
                }
              ],
              "timestamp": "${CURRENT_TIME}"
            }]
          }
          EOF

          if curl -f -H "Content-Type: application/json" \
                  -H "User-Agent: GitHub-Actions" \
                  -X POST \
                  -d @failure_payload.json \
                  "${{ secrets.DISCORD_WEBHOOK_URL }}"; then
            echo "✅ Failure notification sent"
          else
            echo "❌ Failed to send failure notification"
          fi

      - name: Notify deployment success
        run: |
          echo "🚀 Production deployment completed on $(hostname)"
          echo "Environment: production"
          echo "Database: $(grep POSTGRES_DB .env | cut -d'=' -f2)"
          echo "Build time: $(grep NEXT_PUBLIC_BUILD_TIME .env | cut -d'=' -f2)"
          echo "PM2 processes:"
          pm2 list
