generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

// ============================================================================
// 사용자 관리
// ============================================================================

model User {
  id            String    @id @default(cuid()) @map("id")
  name          String?   @map("name") @db.VarChar(255)
  email         String?   @unique @map("email") @db.VarChar(255)
  emailVerified DateTime? @map("email_verified") @db.Timestamptz()
  image         String?   @map("image")
  role          Role      @default(USER) @map("role")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz()

  accounts            Account[]
  sessions            Session[]
  profile             UserProfile?
  notices             Notice[]
  volunteerActivities VolunteerActivity[]
  applications        Application[]
  selections          Selection[]

  @@map("users")
}

model UserProfile {
  id           String    @id @default(cuid()) @map("id")
  userId       String    @unique @map("user_id")
  phone        String?   @map("phone") @db.VarChar(20)
  birthDate    DateTime? @map("birth_date") @db.Date
  organization String?   @map("organization") @db.VarChar(255)
  address      String?   @map("address") @db.Text
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// ============================================================================
// 인증 관련 (NextAuth)
// ============================================================================

model Account {
  id                       String    @id @default(cuid()) @map("id")
  userId                   String    @map("user_id")
  type                     String    @map("type") @db.VarChar(255)
  provider                 String    @map("provider") @db.VarChar(255)
  providerAccountId        String    @map("provider_account_id") @db.VarChar(255)
  createdAt                DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt                DateTime? @map("deleted_at") @db.Timestamptz()
  refresh_token            String?   @map("refresh_token") @db.Text
  access_token             String?   @map("access_token") @db.Text
  expires_at               Int?      @map("expires_at")
  refresh_token_expires_in Int?      @map("refresh_token_expires_in")
  token_type               String?   @map("token_type") @db.VarChar(255)
  scope                    String?   @map("scope") @db.VarChar(255)
  id_token                 String?   @map("id_token") @db.Text
  session_state            String?   @map("session_state") @db.VarChar(255)
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid()) @map("id")
  sessionToken String    @unique @map("session_token") @db.VarChar(255)
  userId       String    @map("user_id")
  expires      DateTime  @map("expires") @db.Timestamptz()
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz()
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String    @map("identifier")
  token      String    @unique @map("token") @db.VarChar(255)
  expires    DateTime  @map("expires") @db.Timestamptz()
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz()

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// 봉사활동 관리
// ============================================================================

model VolunteerActivity {
  id                  String                  @id @default(cuid()) @map("id")
  title               String                  @map("title") @db.VarChar(255)
  description         String                  @map("description") @db.Text
  startAt             DateTime                @map("start_at") @db.Timestamptz()
  endAt               DateTime                @map("end_at") @db.Timestamptz()
  location            String                  @map("location") @db.VarChar(500)
  status              VolunteerActivityStatus @default(PLANNING) @map("status")
  applicationDeadline DateTime                @map("application_deadline") @db.Date()
  managerId           String                  @map("manager_id")
  createdAt           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt           DateTime                @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt           DateTime?               @map("deleted_at") @db.Timestamptz()
  maxParticipants     Int?                    @map("max_participants")

  manager      User          @relation(fields: [managerId], references: [id])
  applications Application[]

  @@map("volunteer_activities")
}

model Application {
  id                  String            @id @default(cuid()) @map("id")
  userId              String            @map("user_id")
  volunteerActivityId String            @map("volunteer_activity_id")
  emergencyContact    String            @map("emergency_contact") @db.VarChar(100)
  status              ApplicationStatus @default(WAITING) @map("status")
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt           DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt           DateTime?         @map("deleted_at") @db.Timestamptz()

  user              User              @relation(fields: [userId], references: [id])
  volunteerActivity VolunteerActivity @relation(fields: [volunteerActivityId], references: [id])
  selection         Selection?

  @@unique([userId, volunteerActivityId])
  @@map("applications")
}

model Selection {
  id             String   @id @default(cuid()) @map("id")
  applicationId  String   @unique @map("application_id")
  isSelected     Boolean  @map("is_selected")
  selectedById   String   @map("selected_by_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  selectionOrder Int?     @map("selection_order")
  waitingOrder   Int?     @map("waiting_order")
  notes          String?  @map("notes") @db.Text

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  selectedBy  User        @relation(fields: [selectedById], references: [id])

  @@map("selections")
}

// ============================================================================
// 커뮤니케이션
// ============================================================================

model Notice {
  id          String    @id @default(cuid()) @map("id")
  title       String    @map("title") @db.VarChar(255)
  content     String    @map("content") @db.Text
  authorId    String    @map("author_id")
  isPublished Boolean   @default(true) @map("is_published")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz()

  author User @relation(fields: [authorId], references: [id])

  @@index([createdAt(sort: Desc), isPublished, deletedAt])
  @@map("notices")
}

// ============================================================================
// Enum 정의
// ============================================================================

enum Role {
  USER  @map("USER")
  ADMIN @map("ADMIN")
}

enum VolunteerActivityStatus {
  PLANNING    @map("PLANNING") // 일정 계획 중
  RECRUITING  @map("RECRUITING") // 신청 접수 중
  SELECTED    @map("SELECTED") // 선발 완료
  IN_PROGRESS @map("IN_PROGRESS") // 교육 진행 중
  COMPLETED   @map("COMPLETED") // 완료
  CANCELLED   @map("CANCELLED") // 취소됨
}

enum ApplicationStatus {
  WAITING  @map("WAITING") // 대기자
  SELECTED @map("SELECTED") // 선발됨
  REJECTED @map("REJECTED") // 탈락
}
