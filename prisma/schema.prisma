generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

// ============================================================================
// 사용자 관리
// ============================================================================

model User {
  id            String       @id @default(cuid()) @map("id")
  name          String?      @db.VarChar(255) @map("name")
  email         String?      @db.VarChar(255) @unique @map("email")
  emailVerified DateTime?    @db.Timestamptz() @map("email_verified")
  image         String?      @map("image")
  role          Role         @default(USER) @map("role")
  createdAt     DateTime     @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt     DateTime     @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt     DateTime?    @db.Timestamptz() @map("deleted_at")

  accounts              Account[]
  sessions              Session[]
  profile               UserProfile?
  notices               Notice[]
  volunteerActivities   VolunteerActivity[]
  applications          Application[]
  selections            Selection[]

  @@map("users")
}

model UserProfile {
  id          String    @id @default(cuid()) @map("id")
  userId      String    @unique @map("user_id")
  phone       String?   @db.VarChar(20) @map("phone")
  birthDate   DateTime? @db.Date @map("birth_date")
  organization String?  @db.VarChar(255) @map("organization")
  address     String?   @db.Text @map("address")
  createdAt   DateTime  @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt   DateTime  @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt   DateTime? @db.Timestamptz() @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// ============================================================================
// 인증 관련 (NextAuth)
// ============================================================================

model Account {
  id                         String    @id @default(cuid()) @map("id")
  userId                     String    @map("user_id")
  type                       String    @db.VarChar(255) @map("type")
  provider                   String    @db.VarChar(255) @map("provider")
  providerAccountId          String    @db.VarChar(255) @map("provider_account_id")
  createdAt                  DateTime  @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt                  DateTime  @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt                  DateTime? @db.Timestamptz() @map("deleted_at")
  refresh_token              String?   @db.Text @map("refresh_token")
  access_token               String?   @db.Text @map("access_token")
  expires_at                 Int?      @map("expires_at")
  refresh_token_expires_in   Int?      @map("refresh_token_expires_in")
  token_type                 String?   @db.VarChar(255) @map("token_type")
  scope                      String?   @db.VarChar(255) @map("scope")
  id_token                   String?   @db.Text @map("id_token")
  session_state              String?   @db.VarChar(255) @map("session_state")
  user                       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid()) @map("id")
  sessionToken String    @db.VarChar(255) @unique @map("session_token")
  userId       String    @map("user_id")
  expires      DateTime  @db.Timestamptz() @map("expires")
  createdAt    DateTime  @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt    DateTime  @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt    DateTime? @db.Timestamptz() @map("deleted_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String    @map("identifier")
  token      String    @db.VarChar(255) @unique @map("token")
  expires    DateTime  @db.Timestamptz() @map("expires")
  createdAt  DateTime  @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt  DateTime  @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt  DateTime? @db.Timestamptz() @map("deleted_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// 봉사활동 관리
// ============================================================================

model VolunteerActivity {
  id                  String                    @id @default(cuid()) @map("id")
  title               String                    @db.VarChar(255) @map("title")
  description         String                    @db.Text @map("description")
  startAt             DateTime                  @db.Timestamptz() @map("start_at")
  endAt               DateTime                  @db.Timestamptz() @map("end_at")
  location            String                    @db.VarChar(500) @map("location")
  status              VolunteerActivityStatus   @default(PLANNING) @map("status")
  applicationDeadline DateTime                  @db.Date() @map("application_deadline")
  managerId           String                    @map("manager_id")
  createdAt           DateTime                  @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt           DateTime                  @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt           DateTime?                 @db.Timestamptz() @map("deleted_at")
  maxParticipants     Int?                      @map("max_participants")
  qualifications      String?                   @db.Text @map("qualifications")
  materials           String?                   @db.Text @map("materials")

  manager      User           @relation(fields: [managerId], references: [id])
  applications Application[]

  @@map("volunteer_activities")
}

model Application {
  id                   String            @id @default(cuid()) @map("id")
  userId               String            @map("user_id")
  volunteerActivityId  String            @map("volunteer_activity_id")
  emergencyContact     String            @db.VarChar(100) @map("emergency_contact")
  status               ApplicationStatus @default(WAITING) @map("status")
  createdAt            DateTime          @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt            DateTime          @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt            DateTime?         @db.Timestamptz() @map("deleted_at")

  user              User              @relation(fields: [userId], references: [id])
  volunteerActivity VolunteerActivity @relation(fields: [volunteerActivityId], references: [id])
  selection         Selection?

  @@unique([userId, volunteerActivityId])
  @@map("applications")
}

model Selection {
  id              String    @id @default(cuid()) @map("id")
  applicationId   String    @unique @map("application_id")
  isSelected      Boolean   @map("is_selected")
  selectedById    String    @map("selected_by_id")
  createdAt       DateTime  @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt       DateTime  @updatedAt @db.Timestamptz() @map("updated_at")
  selectionOrder  Int?      @map("selection_order")
  waitingOrder    Int?      @map("waiting_order")
  notes           String?   @db.Text @map("notes")

  application  Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  selectedBy   User        @relation(fields: [selectedById], references: [id])

  @@map("selections")
}

// ============================================================================
// 커뮤니케이션
// ============================================================================

model Notice {
  id          String    @id @default(cuid()) @map("id")
  title       String    @db.VarChar(255) @map("title")
  content     String    @db.Text @map("content")
  authorId    String    @map("author_id")
  isPublished Boolean   @default(true) @map("is_published")
  createdAt   DateTime  @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt   DateTime  @updatedAt @db.Timestamptz() @map("updated_at")
  deletedAt   DateTime? @db.Timestamptz() @map("deleted_at")

  author User @relation(fields: [authorId], references: [id])

  @@index([createdAt(sort: Desc), isPublished, deletedAt])
  @@map("notices")
}

// ============================================================================
// Enum 정의
// ============================================================================

enum Role {
  USER  @map("USER")
  ADMIN @map("ADMIN")
}

enum VolunteerActivityStatus {
  PLANNING              @map("PLANNING")              // 일정 계획 중
  RECRUITING            @map("RECRUITING")            // 신청 접수 중
  SELECTED              @map("SELECTED")              // 선발 완료
  IN_PROGRESS           @map("IN_PROGRESS")           // 교육 진행 중
  COMPLETED             @map("COMPLETED")             // 완료
  CANCELLED             @map("CANCELLED")             // 취소됨
}

enum ApplicationStatus {
  WAITING   @map("WAITING")   // 대기자
  SELECTED  @map("SELECTED")  // 선발됨
  REJECTED  @map("REJECTED")  // 탈락
}
